<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
            Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/1MRTuKwRsB0">https://youtu.be/1MRTuKwRsB0</link>,
            <link xlink:href="https://youtu.be/RKbX5-EWpzA">https://youtu.be/RKbX5-EWpzA</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Caesar/tm.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tm.c</filename>
            </link> 
        </para>
        
        <para>
            Mielőtt belekezdenénk a feladatba, fontos megjegyezni hogy mik a háromszögmátrixok. Két fajta háromszögmátrix létezik:
            Alsó- és felső háromszögmátrix. Ha alsó háromszögmátrixról beszélünk akkor, arra gondolunk, hogy a mátrix főátlója felett, csak nullások szerepelnek,
            felső háromszög esetén pedig a főátló alatt szerepelnek csak nullások. Fontos azt is megjegyezni hogy minden háromszögmátrix oszlopainak és sorainak száma megegyezik.
        </para>
        
        
        
        <programlisting language="c"><![CDATA[#include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5;
    double **tm;
            
            ]]></programlisting>
            <para>
                Először is felvesszük a fő paramétereinket. Az 'nr' változó fogja jelölni a sorok számát, a 'tm' pedig
                maga a háromszögmátrix lesz.
            </para>
            <programlisting language="c"><![CDATA[

    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

             ]]></programlisting>
            <para>
                Abban az esetben ha nem tudunk elég helyet felszabadítani (allokálni) a tm-nek a malloc paranccsal (memory allocation), akkor a program leáll 
                return -1-el.
            </para>
            <programlisting language="c"><![CDATA[
            
            
    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }
                 ]]></programlisting>
            <para>
                Abban az esetben ha nem sikerül elég helyet felszabadítani a memóriában azokra a mutatókra amikre a tm for mutatni, akkor a program leáll.
            </para>
            <programlisting language="c"><![CDATA[

    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }
                
                 ]]></programlisting>
            <para>
                Feltöltjük a háromszögmátrixot elemekkel majd kiírjuk azokat.
            </para>
            <programlisting language="c"><![CDATA[

    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;	
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;
                
                 ]]></programlisting>
            <para>
                Értékeket adunk adott helyekre a mátrixon.
            </para>
            <programlisting language="c"><![CDATA[

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }
                 ]]></programlisting>
            <para>
               Kiírjuk a mátrix elemeit. 
            </para>
            <programlisting language="c"><![CDATA[

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
                
}]]></programlisting>

<para>
    Lefuttatva a programot láthatjuk hogy minden rendben történt a memóriafoglalással.
</para>

<screen>
    ./tm
0x7fff92f000f0
0x563fff77c670
0x563fff77c6a0
0.000000, 
1.000000, 2.000000, 
3.000000, 4.000000, 5.000000, 
6.000000, 7.000000, 8.000000, 9.000000, 
10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 
0.000000, 
1.000000, 2.000000, 
3.000000, 4.000000, 5.000000, 
42.000000, 43.000000, 44.000000, 45.000000, 
10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 
</screen>

<para>
     A végén pedig felszabadítjuk a helyet amit lefoglaltunk a program elején.
</para>
                   
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        
        <para>
            Az XOR titkosító egy elveiben nagyon egyszerű titkosító. A lényege, hogy a inputba kap egy kulcsot, illetve egy hosszabb szöveget,
            mindkét inputot bitjeiben veszi, és a bejövő szöveg bitjeit az XOR müvelet alapján 'titkosítja' a kulcs bitjeivel.
            
            Az aki tudja a kulcsot ugyanazzal az XOR művelettel vissza tudja kapni az eredeti kulcsot.
        </para>
       <programlisting language="c"><![CDATA[
           //e.c
           
           #include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256


int
main (int argc, char **argv)
{

  char kulcs[MAX_KULCS];
  char buffer[BUFFER_MERET];

  int kulcs_index = 0;
  int olvasott_bajtok = 0;

  int kulcs_meret = strlen (argv[1]);
  strncpy (kulcs, argv[1], MAX_KULCS);
           
           ]]></programlisting>
           <para>
               Megadjuk a fő változóinkat.
           </para>
           <programlisting language="c"><![CDATA[

  while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {

      for (int i = 0; i < olvasott_bajtok; ++i)
	{

	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;

	}

      write (1, buffer, olvasott_bajtok);

    }
               
               }
               ]]></programlisting>
           <para>
               Buffereljük az inputszöveget amíg tudjuk, minden bitjét pedig a kulccsal xorozzuk. Végül pedig kiírjuk a szöveget, mely mehet a standar outputra, vagy fájlba is
               attól függően hogy hogyan adtuk meg a parancssori argumentumokat.
           </para>
           
           <para>
               Ez hogy néz ki:
           </para>
          
           <figure>
            <title></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/c_xor.png" scale="30" />
                </imageobject>
               
            </mediaobject>
        </figure>     

       
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <programlisting language="java"><![CDATA[
            
            
            //exor.java
            public class exor {
            
            
public class exor {
    
    public exor(String keyString,
            java.io.InputStream inputStream,
            java.io.OutputStream outputStream)
            throws java.io.IOException {
        
        byte [] kulcs = keyString.getBytes();
        byte [] buffer = new byte[256];
        int keyIndex = 0;
        int readBytes = 0;

        while((readBytes =
                inputStream.read(buffer)) != -1) {
            
            for(int i=0; i<readBytes; ++i) {
                
                buffer[i] = (byte)(buffer[i] ^ kulcs[keyIndex]);
                keyIndex = (keyIndex+1) % kulcs.length;
                
            }
            
            outputStream.write(buffer, 0, readBytes);
            
        }
        
    }
    
    public static void main(String[] args) {
        
        try {
            
            new exor(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();
            
        }
        
    }
    
}
       
       ]]></programlisting>
       
       <para>
           Működése ugyanolyan mint a c-beli változata, a különbség annyi hogy itt Java-ban van megírva.
       </para>
        <figure>
            <title></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/java_xor.png" scale="30" />
                </imageobject>
               
            </mediaobject>
        </figure> 
       
       
       
                  
    </section>        
    <section xml:id="bhax-textbook-feladatok-caesar.EXOR-toro">
        <title>C EXOR törő</title>
        
        <para>
            Ez a program úgy nevezett brute force-al töri fel a titkosított szöveget. Nem valami hatásos, rengeteg erőforrást igényel, mivel 
            minden létező kulcson végig kell menne, azonban mindenféleképpen hatásos.
            
            Egy másik nagy hátránya, hogy a kódtörőnek tudnia kell hány karakteres a kulcs.
        </para>
        
        <programlisting language="c"><![CDATA[
        
        #define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 8
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

            ]]></programlisting>
            <para>
                include-oljuk a szükséges dolgokat. Itt definiáljuk a kulcs méretét is, mely itt ebben a programban 8.
                Ezen felül definiálásra kerül még a buffer mérete is.
            </para>
            <programlisting language="c"><![CDATA[
            
            
double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
  int sz = 0;
  for (int i = 0; i < titkos_meret; ++i)
    if (titkos[i] == ' ')
      ++sz;

  return (double) titkos_meret / sz;
}

int
tiszta_lehet (const char *titkos, int titkos_meret)
{
  // a tiszta szoveg valszeg tartalmazza a gyakori magyar szavakat
  // illetve az átlagos szóhossz vizsgálatával csökkentjük a
  // potenciális töréseket

  double szohossz = atlagos_szohossz (titkos, titkos_meret);

  return szohossz > 6.0 && szohossz < 9.0
    && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
    && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

}
                ]]></programlisting>
            <para>
                Ez a szekció azért felelős hogy a program felismerje ha tiszta szövegre bukkan. Mivel a számítógép nyilvánvalóan nem tud értelmezni 
                szöveget, ezért megadunk neki néhány gyakrabban használt szót melyek ebben az esetben a 'hogy', 'nem', 'az', 'ha'. Ha ezekre rábukkan 
                akkor kiírja a kulcsot melynek használatával rábukkant erre, illetve kiírja az xoros szöveget is.
            </para>
            <programlisting language="c"><![CDATA[

void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

  int kulcs_index = 0;

  for (int i = 0; i < titkos_meret; ++i)
    {

      titkos[i] = titkos[i] ^ kulcs[kulcs_index];
      kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}

int
exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
	    int titkos_meret)
{

  exor (kulcs, kulcs_meret, titkos, titkos_meret);

  return tiszta_lehet (titkos, titkos_meret);

}

int
main (void)
{

  char kulcs[KULCS_MERET];
  char titkos[MAX_TITKOS];
  char *p = titkos;
  int olvasott_bajtok;

  // titkos fajt berantasa
  while ((olvasott_bajtok =
	  read (0, (void *) p,
		(p - titkos + OLVASAS_BUFFER <
		 MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
    p += olvasott_bajtok;

  // maradek hely nullazasa a titkos bufferben  
  for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
    titkos[p - titkos + i] = '\0';

  // osszes kulcs eloallitasa
  for (int ii = '0'; ii <= '9'; ++ii)
    for (int ji = '0'; ji <= '9'; ++ji)
      for (int ki = '0'; ki <= '9'; ++ki)
	for (int li = '0'; li <= '9'; ++li)
	  for (int mi = '0'; mi <= '9'; ++mi)
	    for (int ni = '0'; ni <= '9'; ++ni)
	      for (int oi = '0'; oi <= '9'; ++oi)
		for (int pi = '0'; pi <= '9'; ++pi)
		  {
		    kulcs[0] = ii;
		    kulcs[1] = ji;
		    kulcs[2] = ki;
		    kulcs[3] = li;
		    kulcs[4] = mi;
		    kulcs[5] = ni;
		    kulcs[6] = oi;
		    kulcs[7] = pi;

		    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
		      printf
			("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
			 ii, ji, ki, li, mi, ni, oi, pi, titkos);

		    // ujra EXOR-ozunk, igy nem kell egy masodik buffer  
		    exor (kulcs, KULCS_MERET, titkos, p - titkos);
		  }

  return 0;
}

        
         ]]></programlisting>
         
         <para>
             A program utolsó fázisában láthatjuk ahogy egyesével végigmegy az előállítható kulcsokon, és ellenőrzi hogy megjelentek-e a gyakori szavak.
         </para>
       
       <para>
           lefuttatva így néz ki:
       </para>
        <screen>
            ./e 00000001 &lt;in.txt &gt; out.txt
            ./t &lt;out.txt
Kulcs: [00000001]
Tiszta szoveg: [az Egyszer volt hol nem volt, volt egyszer egy magányos txt file.
Léte abba merült ki hogy gazdája random programok parancssori argumentumába írta bele.

Ez valóban egy igencsak magányos és szomorú lét, hogy boldog volt-e? nem

ha azonban lefordulna ez a cucc annak nagyon örülnék.
]


        </screen>
        
        
        
        
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
                   
                   
        <para>
            Neurális hálókat legfőképp gépi tanuláshoz használnak. A neuronok, melyeket legkönnyebben egy nagy gráf elemeiként tudunk elképzelni kommunikálnak egymással.
            Ezek a neuronok legalább három rétegben vannak elhelyezve. A bemeneti rétegben nem történik semmi, azonban a rejtett rétegekben különféle műveletek hajtódnak végre,
            melyek a neurális háló gerincét képzeik.
        </para>
        
        <para>
            A következő program lefuttatása után láthatjuk ahogy ez az R nyelvben íródott program megtanulja az OR, AND és EXOR kapukat.
        </para>
        
        <programlisting language="R"><![CDATA[
                   
            
library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])


a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])


                ]]></programlisting>   
                   
                <para>
                    Miután letöltöttük a neuralnet csomagot, a programot futtathatjuk is.
                </para>
                
                <screen>
                    $neurons[[1]]
       a1 a2
[1,] 1  0  0
[2,] 1  1  0
[3,] 1  0  1
[4,] 1  1  1

$neurons[[2]]
     [,1]       [,2]       [,3]       [,4]       [,5]       [,6]       [,7]
[1,]    1 0.61826996 0.47173771 0.36548935 0.91902536 0.86546616 0.80702504
[2,]    1 0.99216843 0.02119818 0.97865534 0.06052892 0.99895668 0.09329873
[3,]    1 0.02954135 0.97322920 0.01030473 0.99963950 0.06385189 0.99842321
[4,]    1 0.70423361 0.46855755 0.45318772 0.94026710 0.91032743 0.93968626

$neurons[[3]]
     [,1]         [,2]         [,3]        [,4]       [,5]
[1,]    1 1.177180e-03 2.429896e-03 0.998396000 0.99682623
[2,]    1 9.982752e-01 1.214920e-07 0.003284555 0.99999920
[3,]    1 2.212019e-06 9.943069e-01 0.999998730 0.01409462
[4,]    1 1.275600e-03 9.200916e-04 0.998455350 0.99911935

$neurons[[4]]
     [,1]       [,2]       [,3]       [,4]       [,5]       [,6]       [,7]
[1,]    1 0.99739291 0.98437949 0.04652966 0.98731380 0.01096734 0.01191996
[2,]    1 0.99999293 0.04148374 0.46562351 0.02323602 0.98358954 0.98375911
[3,]    1 0.03192529 0.20509612 0.98744873 0.29616955 0.93373216 0.75232819
[4,]    1 0.99744281 0.98452897 0.04595664 0.98741608 0.01083823 0.01181926


$net.result
             [,1]
[1,] 0.0006787719
[2,] 0.9996485352
[3,] 0.9997862854
[4,] 0.0006762063

> 

                </screen>
                <para>
                    Láthatjuk ahogy a program 'megtanulta' hogy melyik logikai kapu milyen bemenettel milyen értéket fog visszaadni.
                </para>
                
                <figure>
            <title>EXOR</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/exor2.png" scale="30" />
                </imageobject>
                
            </mediaobject>
        </figure>   
        
          <figure>
            <title>OR</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/or.png" scale="50" />
                </imageobject>
                
            </mediaobject>
        </figure>     
        
        <figure>
            <title>AND OR</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/or_and.png" scale="50" />
                </imageobject>
                
            </mediaobject>
        </figure>   
        
        <figure>
            <title>EXOR</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/exor.png" scale="50" />
                </imageobject>
                
            </mediaobject>
        </figure>   

                   
                   
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/XpBnR31BRJY">https://youtu.be/XpBnR31BRJY</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nbatfai/nahshon/blob/master/ql.hpp#L64">https://github.com/nbatfai/nahshon/blob/master/ql.hpp#L64</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
        
        <para>
            SKIP - 2
        </para>           
    </section>        
        

</chapter>                
