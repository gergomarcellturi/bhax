<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section xml:id="bhax-textbook-feladatok-mandelbrot.Mandelbrot">
        <title>A Mandelbrot halmaz</title>
        <para>
            Írj olyan C++ programot, amely kiszámolja a Mandelbrot halmazt!     
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        
                
        <para>
            Még mielőtt nekikezdenénk a feladatnak, fontosnak tartom hogy tisztázzuk mi is 
            az a Mandelbrot halmaz.
            
            A Mandelbrot halmaz egy fraktál-minta, mely a virtuálisan a komplex síkon vizualizálható.
            
            Fontos információk:
            Komplex szám. Bizonyára mindenki találkozott már négyzetszámokkal, így mindenki meg tudja mondani hogy mi
            25-nek a gyöke. Ez 5, viszont az hogy mi -25-nek a négyzetgyöke már egy érdekesebb téma.
            Mivel ilyen szám nem létezik, a matematikában a -1-nek a négyzetgyökét elnevezték 'imaginary number'-nek,
            azaz kitalált számnak, melyet 'i'-vel jelölünk. Ezen kitalált szám segítségével már meg tudjuk mondani
            a -25-nek a gyökét ami 5i-lesz, egy komplex szám.
            
            A fraktál-mintára nincs elfogadott definíció a matematikában.
        </para>
       
       
        <para>
            A kód lefuttatásához szükségünk van png++-ra amit a következő linken tudunk elérni:
            
            <link xlink:href="http://www.nongnu.org/pngpp/doc/0.2.9/">png++</link>
            
            A részletes telepítési útmutató is megtalálható ezen az oldalon.
        </para>
       
        <para>
            <link xlink:href="../../Feladatok/mandelpngt.c++">
                        <filename>mandelpngt.c++</filename>
            </link>
        </para>
         <programlisting language="c"><![CDATA[
             
             //mandelpngt.c++
         #include <iostream>
#include "png++/png.hpp"
#include <sys/times.h>

#define MERET 600
#define ITER_HAT 32000

void
mandel (int kepadat[MERET][MERET]) {

    
    clock_t delta = clock ();
    
    struct tms tmsbuf1, tmsbuf2;
    times (&tmsbuf1);
             
              ]]></programlisting> 
              <para>
                  Felveszünk két változót, mellyel az időt fogjuk mérni. Ez azért fog kelleni hogy láthassuk mennyi idő alatt futott le a program.
              </para>
              <programlisting language="c"><![CDATA[

   
    float a = -2.0, b = .7, c = -1.35, d = 1.35;
    int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;
                  
                  ]]></programlisting> 
              <para>
                 A számítás adatai. Ezek a változók lesznek szükségesek ahhoz hogy 'meg tudjuk rajzolni' a mandelbrot halmazt, illetve
                  az annak kiszámítására fognak szolgálni.
              </para>
              <programlisting language="c"><![CDATA[

    
    float dx = (b - a) / szelesseg;
    float dy = (d - c) / magassag;
    float reC, imC, reZ, imZ, ujreZ, ujimZ;
                  
                  ]]></programlisting> 
              <para>
                 A fő számítás a már fentebb deklarált és értékkel hozzáfűzött változókkal itt történik meg.
              </para>
              <programlisting language="c"><![CDATA[
 
    int iteracio = 0;
    
    for (int j = 0; j < magassag; ++j)
    {
        
        for (int k = 0; k < szelesseg; ++k)
        {
           
            reC = a + k * dx;
            imC = d - j * dy;
            
            reZ = 0;
            imZ = 0;
            iteracio = 0;
            
            while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
            {
                // z_{n+1} = z_n * z_n + c
                ujreZ = reZ * reZ - imZ * imZ + reC;
                ujimZ = 2 * reZ * imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;

            }

            kepadat[j][k] = iteracio;
        }
    }
                  ]]></programlisting> 
              <para>
                 255 iteráció alatt végigmegyünk a rácson, kiszámítva minden pontjára a mandelbrot halmazt.
                  Technikailag itt történik a 'rajzolás'.
              </para>
              <programlisting language="c"><![CDATA[

    times (&tmsbuf2);
    std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
              + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

    delta = clock () - delta;
    std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}
                  
                  ]]></programlisting> 
              <para>
                 Kiírjuk az időt, hogy tudjuk mindez mennyi időbe tellett.
              </para>
              <programlisting language="c"><![CDATA[

int
main (int argc, char *argv[])
{

    if (argc != 2)
    {
        std::cout << "Hasznalat: ./mandelpng fajlnev";
        return -1;
    }

                  
                  ]]></programlisting> 
              <para>
                 Ha esetleg rosszul használná a felhasználó a fájlt, egy rövid emlékeztetőt írunk ki neki standard outputra, hogy tudja
                  hogyan kell lefuttatni.
              </para>
              <programlisting language="c"><![CDATA[
    int kepadat[MERET][MERET];

    mandel(kepadat);

    png::image < png::rgb_pixel > kep (MERET, MERET);

    for (int j = 0; j < MERET; ++j)
    {
        //sor = j;
        for (int k = 0; k < MERET; ++k)
        {
            kep.set_pixel (k, j,
                           png::rgb_pixel (255 -
                                           (255 * kepadat[j][k]) / ITER_HAT,
                                           255 -
                                           (255 * kepadat[j][k]) / ITER_HAT,
                                           255 -
                                           (255 * kepadat[j][k]) / ITER_HAT));
        }
    }

    kep.write (argv[1]);
    std::cout << argv[1] << " mentve" << std::endl;

}
         
         
         
         
         ]]></programlisting> 
         
         <para>
             A futtatásának módja:
         </para>
         
         <screen>
             g++ mandelpngt.c++ -lpng16 -o mandel
         </screen>
         <screen>
             ./mandel mandel.png
         </screen>
         <para>
             És íme a végeredmény:
         </para>
         
         
         <figure>
            <title>Mandelbrot halmaz</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandel.png" scale="50" />
                </imageobject>
                
            </mediaobject>
        </figure>  
         
         
         

    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Írj olyan C programot, amely kiszámolja a Mandelbrot halmazt!                     
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása:                
        </para>
        
        <para>
            A feladat ugyanaz mint az előzőben: meg kell jeleníteni vizuálisan a mandelbrot halmazt, azonban ezúttal
            most C-ben. 
            
            A feladat jellege miatt, maga a program nem fog sokban különbözni az előzőtől, mivel mindkettő ugyanazt hajtja végre, 
            csupán különböző nyelven. Mivel C++-ban kicsit több eszközünk van dolgozni, itt több mindent meg kell adni, vagy máshogy kell megadni
            hog minden működjön.
        </para>
        
        <para>
            <link xlink:href="../../Feladatok/3.1.2.cpp">
                        <filename>3.1.2.cpp</filename>
            </link>
        </para>
        <programlisting language="c"><![CDATA[
        
//3.1.2.cpp
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon

      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}

        
              ]]></programlisting> 
              
              <para>
                  Futtatása:
              </para>
              
              <screen>
                  g++ 3.1.2.cpp -lpng -O3 -o 3.1.2
              </screen>
              <screen>
                  ./3.1.2 mandel.png hosszúság magasság n a b c d
              </screen>
              <screen>
                 ./3.1.2 mandel.png 1920 1080 255 -2 0.7 -1.35 1.35
Szamitas
mandel.png mentve.

              </screen>
              
              <para>
                  A végeredmény:
              </para>
              <figure>
            <title>Mandelbrot halmaz</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandel4.png" scale="25" />
                </imageobject>
                
            </mediaobject>
        </figure>  
        
        <para>
            Láthatjuk hogy a Mandelbrot halmaz itt is kirajzolódid, igaz, más színkompzícióval.
        </para>
              
              
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
              
        <para>
            A lényeges különbség e között és az előző két feladatt között a 'c', ami a Mandelbrot halmazos feladatokban változó, itt, a Júlia halmaz vizsgálatánál,
            kirajzolásánál állandó lesz.
            
            Kialakulása egy bugnak köszönhető amire Clifford bukkant rá amikor a Júlia halmaz elemeit próbálta megközelíteni.
            A bug miatt a képek melyeket a kód generált egysejtű organizmusokra kezdtek hasonlítani, mely miatt Clifford úgy hitte
            rábukkant a természet egy törvényére.
        </para>
        
        <para>
            A kód:
            
        </para>
        <para>
            <link xlink:href="../../Feladatok/biomorf.cpp">
                        <filename>biomorf.cpp</filename>
            </link>
        </para>
        
        
                         <programlisting language="c++"><![CDATA[     
                             
                                  //biomorf.cpp

#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

            ]]></programlisting>
            <para>
                Inicializásióc lépések. A programban deklaráljuk a fő változókat, illetve a parancssori argumentumokból értéket is rendelünk hozzájuk.
                Fontos kiemelni hogy abban az esetbe ha hiányzik egy argumentum a program automatikusan kiírja hogy hogyan kell futtatni.
            </para>
                              <programlisting language="c++"><![CDATA[                  
                             
    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }
                                  
                                  ]]></programlisting>
            <para>
                A program ezen szakaszában történnek meg a tényleges műveletek. Végigmegyünk az összes soron és oszlopon, minden rácspontra egyesével kiszámítva, 
                és minden rácspontra a képen hozzárendeljük a megfelelő értéket.
            </para>
                              <programlisting language="c++"><![CDATA[  

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
      
                                          
             ]]></programlisting>   
             
             <para>
                 Végül pedig egy visszajelzést írunk ki a standard outpura, hogy tudjuk, lefutott a program.
                 Feltűnhet még hogy kiírja a program hogy éppen hol tart a futtatásában, ezt százalékban teszi meg, így láthatjuk ha esetleg nem fut, elakad, vagy valami hiba folytán
                 nem végzdik el a processz, nem kell várnunk a végtelenségig hogy lássuk valami nincs rendben.
             </para>  
             
             <para>
                 A program futtatása:
             </para>
             <screen>
                 g++ biomorf.cpp -lpng -O3 -o biomorfok
             </screen>
             
             <screen>
                 ./biomorfok bmorf.png 800 800 10 -2 2 -2 2 .285 0 10
             </screen>
             <screen>
                 Szamitas
                bmorf.png mentve.

             </screen>
             <para>
                 A végeredmény pedig így néz ki:
             </para>
             
             <figure>
            <title>Biomorfok</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/bmorf.png" scale="25" />
                </imageobject>
                
            </mediaobject>
        </figure>  
                                                                                                                                   
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása:                
 <link xlink:href="../../../bhax/attention_raising/CUDA/mandelpngc_60x60_100.cu">
                <filename>bhax/attention_raising/CUDA/mandelpngc_60x60_100.cu</filename>
            </link> nevű állománya.            
        </para>
        
        <para>
            Megfigyelhető volt mind a három előző feladatban, hogy a program lefutási ideje igencsak hosszadalmas. Ez, ha nagyobb felbontású, vagy több képet akarunk készíteni
            nem tűrhető. Mivel rengeteg számítás megy végbe érthető hogy a lefutási idő nem kevesebb egy másodpercnél, azonban erre van megoldás. Optimalizálni kell a kódot.
            Bár tapasztalt és hozzáértő programozók megpróbálhatják kézzel is azaz manuálisan optimalizálni a kódot, ez a legtöbb esetben nem szokott előnyös lenni, hisz
            ez is okot adhat hibára, illetve nem feltétlenül jelenti azt hogy a legjobb mértékben optimalizálta a kódot. Erre használjuk a CUDA párhuzamosítást.
            
            A grafikus kártya vezérlő egységét használjuk fel, hiszen a hardver egyébként is sok, nagy erőforrást-igénylő számítások elvégzésére lett kitalálva, így ez nekünk
            pont kézre esik.
        </para>
        <para>
            Fontos tudni hogy a program futtatásához szükséges számunka az 'nvidia-cuda-toolkit' telepítése.
        </para>
        <screen>
            sudo apt install nvidia-cuda-toolkit
        </screen>
        <para>
            A lentebbi kód ismerős lehet, hisz hasonlót használtunk a Mandelbortos c++-os megjlenenítésben.
            </para>
        
        <programlisting language="c++"><![CDATA[  

            //mandelpngc_60x60_100.cu
#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>

#include <sys/times.h>
#include <iostream>


#define MERET 600
#define ITER_HAT 32000

__device__ int
mandel (int k, int j)
{



  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;


  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;

  int iteracio = 0;

  reC = a + k * dx;
  imC = d - j * dy;

  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;

  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
      // z_{n+1} = z_n * z_n + c
      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;

      ++iteracio;

    }
  return iteracio;
}


/*
__global__ void
mandelkernel (int *kepadat)
{

  int j = blockIdx.x;
  int k = blockIdx.y;

  kepadat[j + k * MERET] = mandel (j, k);

}
*/

__global__ void
mandelkernel (int *kepadat)
{

  int tj = threadIdx.x;
  int tk = threadIdx.y;

  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;

  kepadat[j + k * MERET] = mandel (j, k);

}

void
cudamandel (int kepadat[MERET][MERET])
{

  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));


  
  dim3 grid (MERET / 10, MERET / 10);
  dim3 tgrid (10, 10);
  mandelkernel <<< grid, tgrid >>> (device_kepadat);  
  
  cudaMemcpy (kepadat, device_kepadat,
	      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
  cudaFree (device_kepadat);

}

int
main (int argc, char *argv[])
{

  clock_t delta = clock ();

  struct tms tmsbuf1, tmsbuf2;
  times (&tmsbuf1);

  if (argc != 2)
    {
      std::cout << "Hasznalat: ./mandelpngc fajlnev";
      return -1;
    }

  int kepadat[MERET][MERET];

  cudamandel (kepadat);

  png::image < png::rgb_pixel > kep (MERET, MERET);

  for (int j = 0; j < MERET; ++j)
    {
      //sor = j;
      for (int k = 0; k < MERET; ++k)
	{
	  kep.set_pixel (k, j,
			 png::rgb_pixel (255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT));
	}
    }
  kep.write (argv[1]);

  std::cout << argv[1] << " mentve" << std::endl;

  times (&tmsbuf2);
  std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

  delta = clock () - delta;
  std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}

                                          
             ]]></programlisting>   
        
        
             <para>
                 A program futtatása:
             </para>
             <screen>
               nvcc mandelpngc_60x60_100.cu -lpng -O3 -o mandelCuda
             </screen>
             <screen>
                 ./mandelCuda mandelCuda.png
             </screen>
             <screen>
                mandelCuda.png mentve
                2
                0.027182 sec
             </screen>
             <para>
                 Láthatjuk hogy nagyságrendekkel gyorsabban fut le a program ha párhuzamosítjuk. Ezzel rengeteg idő megspórolva.
                 Míg az én gépemen az eredeti, nem CUDA-s 17 másodpercig futott, addig ez, a másodperc töredéke alatt.
                 Hogy egészen pontos legyek az én gépemen 566-szor gyorsabban futott le CUDA-val mint nélküle.
             </para>
        
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
            Illetve <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>.        </para>
            <para>
                források:
            </para>
            <para>
                A program futtatásához qt keretrendszer szükséges!
            </para>
            
            
            
            <para>
                A program három fő részből áll. Ezek a következők:
                Main
                Frakablak
                Frakszal
                
                Ezeket külön külön fogom kitárgyalni.
            </para>
            <para>
                Main
            </para>
       <programlisting language="c++"><![CDATA[ 
       #include <QApplication>
#include "frakablak.h"

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    FrakAblak w1;
    w1.show();

    return a.exec();
}
        ]]></programlisting> 
        
        <para>
            Ezen a részben hozzuk létre magát a GUI-t, a keretrendszer adta lehetőségekből.
        </para>
      
        
        
        <para>
            frakablak
        </para>
                <programlisting language="c++"><![CDATA[ 
#include "frakablak.h"

FrakAblak::FrakAblak(double a, double b, double c, double d,
                     int szelesseg, int iteraciosHatar, QWidget *parent)
                         : QMainWindow(parent)
{
    setWindowTitle("Mandelbrot halmaz");

    szamitasFut = true;
    x = y = mx = my = 0;
    this->a = a;
    this->b = b;
    this->c = c;
    this->d = d;
    this->szelesseg = szelesseg;
    this->iteraciosHatar = iteraciosHatar;
    magassag = (int)(szelesseg * ((d-c)/(b-a)));

    setFixedSize(QSize(szelesseg, magassag));
    fraktal= new QImage(szelesseg, magassag, QImage::Format_RGB32);

    mandelbrot = new FrakSzal(a, b, c, d, szelesseg, magassag, iteraciosHatar, this);
    mandelbrot->start();
}

FrakAblak::~FrakAblak()
{
    delete fraktal;
    delete mandelbrot;
}

void FrakAblak::paintEvent(QPaintEvent*) {
    QPainter qpainter(this);
    qpainter.drawImage(0, 0, *fraktal);
    if(!szamitasFut) {
        qpainter.setPen(QPen(Qt::white, 1));
        qpainter.drawRect(x, y, mx, my);

    }
    qpainter.end();
}

void FrakAblak::mousePressEvent(QMouseEvent* event) {

    x = event->x();
    y = event->y();
    mx = 0;
    my = 0;

    update();
}

void FrakAblak::mouseMoveEvent(QMouseEvent* event) {


    mx = event->x() - x;
    my = mx;

    update();
}

void FrakAblak::mouseReleaseEvent(QMouseEvent* event) {

    if(szamitasFut)
        return;

    szamitasFut = true;

    double dx = (b-a)/szelesseg;
    double dy = (d-c)/magassag;

    double a = this->a+x*dx;
    double b = this->a+x*dx+mx*dx;
    double c = this->d-y*dy-my*dy;
    double d = this->d-y*dy;

    this->a = a;
    this->b = b;
    this->c = c;
    this->d = d;

    delete mandelbrot;
    mandelbrot = new FrakSzal(a, b, c, d, szelesseg, magassag, iteraciosHatar, this);
    mandelbrot->start();

    update();
}

void FrakAblak::keyPressEvent(QKeyEvent *event)
{

    if(szamitasFut)
        return;

    if (event->key() == Qt::Key_N)
        iteraciosHatar *= 2;
    szamitasFut = true;

    delete mandelbrot;
    mandelbrot = new FrakSzal(a, b, c, d, szelesseg, magassag, iteraciosHatar, this);
    mandelbrot->start();

}


void FrakAblak::vissza(int magassag, int *sor, int meret)
{
    for(int i=0; i<meret; ++i) {
        QRgb szin = qRgb(0, 255-sor[i], 0);
        fraktal->setPixel(i, magassag, szin);
    }
    update();
}

void FrakAblak::vissza(void)
{
    szamitasFut = false;
    x = y = mx = my = 0;
}

        ]]></programlisting> 
        
        <para>
            A program ezen részében találhatjuk meg a fő konstruktort. Itt lehet beállítani a Mandelbrot halmaz intervallumait. 
            Ugyancsak ebben a részben zajlanak az eseménykezelések, egérkattintások stb. 
        </para>
        
        
        
        <para>
            frakszal
        </para>
          <programlisting language="c++"><![CDATA[ 
#include "frakszal.h"

FrakSzal::FrakSzal(double a, double b, double c, double d,
                   int szelesseg, int magassag, int iteraciosHatar, FrakAblak *frakAblak)
{
    this->a = a;
    this->b = b;
    this->c = c;
    this->d = d;
    this->szelesseg = szelesseg;
    this->iteraciosHatar = iteraciosHatar;
    this->frakAblak = frakAblak;
    this->magassag = magassag;

    egySor = new int[szelesseg];
}

FrakSzal::~FrakSzal()
{
    delete[] egySor;
}

void FrakSzal::run()
{

    double dx = (b-a)/szelesseg;
    double dy = (d-c)/magassag;
    double reC, imC, reZ, imZ, ujreZ, ujimZ;

    int iteracio = 0;

    for(int j=0; j<magassag; ++j) {

        for(int k=0; k<szelesseg; ++k) {

            reC = a+k*dx;
            imC = d-j*dy;

            reZ = 0;
            imZ = 0;
            iteracio = 0;

            while(reZ*reZ + imZ*imZ < 4 && iteracio < iteraciosHatar) {


                ujreZ = reZ*reZ - imZ*imZ + reC;
                ujimZ = 2*reZ*imZ + imC;

                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;

            }


            iteracio %= 256;


            egySor[k] = iteracio;
        }

        frakAblak->vissza(j, egySor, szelesseg);
    }
    frakAblak->vissza();

}



        ]]></programlisting> 
        
        <para>
            Az egész-akciók kezelése. Az hogy hogyan értelmezi a program az egérkattintást, az egérrel való húzást, mind itt történik meg.
        </para>
        
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Ui3B6IJnssY">https://youtu.be/Ui3B6IJnssY</link>, 4:27-től.
            Illetve <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518</link>
        </para>
        
        
        
         <programlisting language="java"><![CDATA[ 
        public class MandelbrotHalmazNagyító extends MandelbrotHalmaz {

    private int x, y;

    private int mx, my;

    public MandelbrotHalmazNagyító(double a, double b, double c, double d,
            int szélesség, int iterációsHatár) {

        super(a, b, c, d, szélesség, iterációsHatár);
        setTitle("A Mandelbrot halmaz nagyításai");

        addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent m) {

                x = m.getX();
                y = m.getY();
                mx = 0;
                my = 0;
                repaint();
            }

        
        ]]></programlisting> 
        
        <para>
            Felvesszük a fő változókat, illetve felveszünk egy MouseListenert, ami az egérről való inputokat fogja kezelni.
        </para>
        
        
           <programlisting language="java"><![CDATA[ 
        
          public void mouseReleased(java.awt.event.MouseEvent m) {
                double dx = (MandelbrotHalmazNagyító.this.b
                        - MandelbrotHalmazNagyító.this.a)
                        /MandelbrotHalmazNagyító.this.szélesség;
                double dy = (MandelbrotHalmazNagyító.this.d
                        - MandelbrotHalmazNagyító.this.c)
                        /MandelbrotHalmazNagyító.this.magasság;

                new MandelbrotHalmazNagyító(MandelbrotHalmazNagyító.this.a+x*dx,
                        MandelbrotHalmazNagyító.this.a+x*dx+mx*dx,
                        MandelbrotHalmazNagyító.this.d-y*dy-my*dy,
                        MandelbrotHalmazNagyító.this.d-y*dy,
                        600,
                        MandelbrotHalmazNagyító.this.iterációsHatár);
            }
        });

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent m) {

                mx = m.getX() - x;
                my = m.getY() - y;
                repaint();
            }
        });
    }
        ]]></programlisting> 
        
        <para>
            Az egér kezelésének gerince, itt van kezelve az egérrel való húzás is.
        </para>
             <programlisting language="java"><![CDATA[ 
        
        public void pillanatfelvétel() {

        java.awt.image.BufferedImage mentKép =
                new java.awt.image.BufferedImage(szélesség, magasság,
                java.awt.image.BufferedImage.TYPE_INT_RGB);
        java.awt.Graphics g = mentKép.getGraphics();
        g.drawImage(kép, 0, 0, this);
        g.setColor(java.awt.Color.BLUE);
        g.drawString("a=" + a, 10, 15);
        g.drawString("b=" + b, 10, 30);
        g.drawString("c=" + c, 10, 45);
        g.drawString("d=" + d, 10, 60);
        g.drawString("n=" + iterációsHatár, 10, 75);
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
        g.dispose();        

        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("MandelbrotHalmazNagyitas_");
        sb.append(++pillanatfelvételSzámláló);
        sb.append("_");

        sb.append(a);
        sb.append("_");
        sb.append(b);
        sb.append("_");
        sb.append(c);
        sb.append("_");
        sb.append(d);
        sb.append(".png");
        ]]></programlisting> 
        
        <para>
            Itt veszi fel a program az új 'koordinátáit' az újonnan kijelölt területnek, és rendeli hozzá a változókhoz.
            Itt kap új elnevezést is az itt létrehozott képfájl.
        </para>
        
         <programlisting language="java"><![CDATA[ 
         try {
            javax.imageio.ImageIO.write(mentKép, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
    }    

    public void paint(java.awt.Graphics g) {

         g.drawImage(kép, 0, 0, this);
       
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         

        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
    }

    public static void main(String[] args) {

        new MandelbrotHalmazNagyító(-2.0, .7, -1.35, 1.35, 600, 255);
    }
}
        
        ]]></programlisting> 
        <para>
            A Mandelbrot halmaz kiszámítása és rajzolása zajlik ezen a részen.
        </para>
        
        
        <figure>
            <title>Mandelbrot halmaz nagyító</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/nagyito.png" scale="25" />
                </imageobject>
                
            </mediaobject>
        </figure>  
        
        
        
    </section>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
