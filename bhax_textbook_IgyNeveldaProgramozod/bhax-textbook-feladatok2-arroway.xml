<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
        	A módosított polártranszformációs normális generátor beprogramozása Java nyelven. Mutassunk rá,
hogy a mi természetes saját megoldásunk (az algoritmus egyszerre két normálist állít elő, kell egy
példánytag, amely a nem visszaadottat tárolja és egy logikai tag, hogy van-e tárolt vagy futtatni kell
az algot.) és az OpenJDK, Oracle JDK-ban a Sun által adott OO szervezés ua.!
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf (16-22 fólia)
Ugyanezt írjuk meg C++ nyelven is! (lásd még UDPROG repó: source/labor/polargen)
        </para>

        <para>
          Java-ban a polártranszformációs művelet, már a függvény része, így ahhoz nem kell semmi extrát hozztenni, mindössze megírni hozzá.
        </para>

        <para>
          c++ esetében viszont több include-ot is meg kell ejteni, amivel biztosítani tudjok a kellő eszközöket, amiknek a rendelkezésünkre kell hogy álljanak ahhoz hogy működjön a program.
        </para>
        
        <para>RandomNum Java class</para>
        
        
       <programlisting language="java"><![CDATA[
import java.util.Random;

public class RandomNum {
	
	Random ran = new Random();
	double lower;
	double upper;
	Double value;
	
	
	public RandomNum(double lower, double upper)
	{
		this.lower = lower;
		this.upper = upper;
	}
	
	public double getNum()
	{
		if ( value == null)
		{
			this.value = lower + (upper - lower) * ran.nextDouble();	
			return lower + (upper - lower) * ran.nextDouble();	
		}
		else
		{
			double asd = this.value;
			value = null;
			return asd;
		}	
	}
}

                    ]]></programlisting>  
       
                    <para>prog2 java class, main-nel együtt</para>
                    <programlisting language="java"><![CDATA[
public class prog2 {

	public static void main(String[] args) {
		
		RandomNum randomnum1 = new RandomNum(-1,1);
		
		System.out.println(randomnum1.getNum());
		System.out.println(randomnum1.getNum());
		System.out.println(randomnum1.getNum());
		System.out.println(randomnum1.getNum());
		System.out.println(randomnum1.getNum());
		System.out.println(randomnum1.getNum());

	}
}

                    ]]></programlisting>  

                    <para>lefuttatva a kódot láthatjuk majd, hogy úgy működik a program, ahogy annak működnie kell.</para>

                    <para>c++-ban láthatjuk hogy 4 include-dal kell kezdenünk.</para>

                    <para>c++ kód</para>

                    <programlisting language="c++"><![CDATA[
#include <iostream>
#include <cstdlib>	
#include <cmath>	
#include <ctime>	

using namespace std;

class Random
{

	public:

		Random();

		~Random(){} 

		double get();
	private:

		bool exist;
		double value;

};


Random::Random() 
{
	exist = false;
	srand (time(NULL));
};


double Random::get() 
{
	if (!exist)
	{
		double u1, u2, v1, v2, w;

		do
		{
			u1 = rand () / (RAND_MAX + 1.0);
			u2 = rand () / (RAND_MAX + 1.0);
			v1 = 2 * u1 - 1;
			v2 = 2 * u2 - 1;
			w = v1 * v1 + v2 * v2;
		    }
		while (w > 1);

		double r = sqrt ((-2 * log (w)) / w);

		value = r * v2; 
		exist = !exist;

		return r * v1;
	}
	
	else
	{
		exist = !exist;
		return value;
	}
};    

int main() 
{

	Random rnd;

	for (int i = 0; i < 2; ++i) cout << rnd.get() << endl;

}

                    ]]></programlisting>  



       
       
    </section>        

    <section>
        <title>Homokózó</title>
        <para>
            Írjuk át az első védési programot (LZW binfa) C++ nyelvről Java nyelvre, ugyanúgy működjön!
Mutassunk rá, hogy gyakorlatilag a pointereket és referenciákat kell kiirtani és minden máris működik
(erre utal a feladat neve, hogy Java-ban minden referencia, nincs választás, hogy mondjuk egy
attribútum pointer, referencia vagy tagként tartalmazott legyen).
Miután már áttettük Java nyelvre, tegyük be egy Java Servletbe és a böngészőből GET-es kéréssel
(például a böngésző címsorából) kapja meg azt a mintát, amelynek kiszámolja az LZW binfáját!
        </para>

        <para>A következő kódrészletek a java-ba átírt c++-os LZW binfa programunkat reprezentálja. Mivel a két nyelv egyébként igen hasonló, mind szintaxisban, mind pedig feature-ökben, ezért észrevehetjük, hogy a két kód között minimális eltérés van. ( ugye nincsnek a java-ban pointerek, referenciák, ami viszont véleményem szerint nem is egy hátrány)</para>

        <para>Csomopont class</para>

         <programlisting language="java"><![CDATA[
  class Csomopont {


    public Csomopont(char betu) {
      this.betu = betu;
      balNulla = null;
      jobbEgy = null;
    }

    ;
    
    

    public Csomopont nullasGyermek() {
      return balNulla;
    }


    public Csomopont egyesGyermek() {
      return jobbEgy;
    }


    public void ujNullasGyermek(Csomopont gy) {
      balNulla = gy;
    }


    public void ujEgyesGyermek(Csomopont gy) {
      jobbEgy = gy;
    }


    public char getBetu() {
      return betu;
    }

    private char betu;

    private Csomopont balNulla = null;
    private Csomopont jobbEgy = null;

  };

                    ]]></programlisting> 


                    <para>LZWBinfa class </para>

         <programlisting language="java"><![CDATA[

public class LZWBinFa {


  public LZWBinFa() {

    fa = gyoker;

  }


  public void egyBitFeldolg(char b) {
    if (b == '0') {
      
      if (fa.nullasGyermek() == null) 
      {
        Csomopont uj = new Csomopont('0');
      
        fa.ujNullasGyermek(uj);
        fa = gyoker;
      } else 
      {
        fa = fa.nullasGyermek();
      }
    }  else {
      if (fa.egyesGyermek() == null) {
        Csomopont uj = new Csomopont('1');
        fa.ujEgyesGyermek(uj);
        fa = gyoker;
      } else {
        fa = fa.egyesGyermek();
      }
    }
  }
 

  public void kiir() {

    melyseg = 0;

    kiir(gyoker, new java.io.PrintWriter(System.out));

  }

  public void kiir(java.io.PrintWriter os) {
    melyseg = 0;
    kiir(gyoker, os);
  }

  private Csomopont fa = null;
  private int melyseg, atlagosszeg, atlagdb;
  private double szorasosszeg;

  public void kiir(Csomopont elem, java.io.PrintWriter os) {
    
    if (elem != null) {
      ++melyseg;
      kiir(elem.egyesGyermek(), os);
      for (int i = 0; i < melyseg; ++i) {
        os.print("---");
      }
      os.print(elem.getBetu());
      os.print("(");
      os.print(melyseg - 1);
      os.println(")");
      kiir(elem.nullasGyermek(), os);
      --melyseg;
    }
  }

  protected Csomopont gyoker = new Csomopont('/');
  int maxMelyseg;
  double atlag, szoras;


  public int getMelyseg() {
    melyseg = maxMelyseg = 0;
    rmelyseg(gyoker);
    return maxMelyseg - 1;
  }

  public double getAtlag() {
    melyseg = atlagosszeg = atlagdb = 0;
    ratlag(gyoker);
    atlag = ((double) atlagosszeg) / atlagdb;
    return atlag;
  }

  public double getSzoras() {
    atlag = getAtlag();
    szorasosszeg = 0.0;
    melyseg = atlagdb = 0;

    rszoras(gyoker);

    if (atlagdb - 1 > 0) {
      szoras = Math.sqrt(szorasosszeg / (atlagdb - 1));
    } else {
      szoras = Math.sqrt(szorasosszeg);
    }

    return szoras;
  }

  public void rmelyseg(Csomopont elem) {
    if (elem != null) {
      ++melyseg;
      if (melyseg > maxMelyseg) {
        maxMelyseg = melyseg;
      }
      rmelyseg(elem.egyesGyermek());
      
      rmelyseg(elem.nullasGyermek());
      --melyseg;
    }
  }

  public void ratlag(Csomopont elem) {
    if (elem != null) {
      ++melyseg;
      ratlag(elem.egyesGyermek());
      ratlag(elem.nullasGyermek());
      --melyseg;
      if (elem.egyesGyermek() == null && elem.nullasGyermek() == null) {
        ++atlagdb;
        atlagosszeg += melyseg;
      }
    }
  }

  public void rszoras(Csomopont elem) {
    if (elem != null) {
      ++melyseg;
      rszoras(elem.egyesGyermek());
      rszoras(elem.nullasGyermek());
      --melyseg;
      if (elem.egyesGyermek() == null && elem.nullasGyermek() == null) {
        ++atlagdb;
        szorasosszeg += ((melyseg - atlag) * (melyseg - atlag));
      }
    }
  }


  public static void usage() {
    System.out.println("Usage: lzwtree in_file -o out_file");
  }

  
  public static void main(String args[]) {
    
    if (args.length != 3) {
      usage();
      
      System.exit(-1);
    }
    
    String inFile = args[0];
   
    if (!"-o".equals(args[1])) {
      usage();
      System.exit(-1);
    }

    
    try {

      java.io.FileInputStream beFile =
              new java.io.FileInputStream(new java.io.File(args[0]));
      
      java.io.PrintWriter kiFile =
              new java.io.PrintWriter(
              new java.io.BufferedWriter(
              new java.io.FileWriter(args[2])));

    
      byte[] b = new byte[1];
     
      LZWBinFa binFa = new LZWBinFa();

     
      while (beFile.read(b) != -1) {
        if (b[0] == 0x0a) {
          break;
        }
      }
    
      boolean kommentben = false;

      while (beFile.read(b) != -1) {

        if (b[0] == 0x3e) {			
          kommentben = true;
          continue;
        }

        if (b[0] == 0x0a) {			
          kommentben = false;
          continue;
        }

        if (kommentben) {
          continue;
        }

        if (b[0] == 0x4e) 
        {
          continue;
        }

        
        for (int i = 0; i < 8; ++i) {
         
          if ((b[0] & 0x80) != 0) 
          {
            binFa.egyBitFeldolg('1');
          } else 
          {
            binFa.egyBitFeldolg('0');
          }
          b[0] <<= 1;
        }

      }

    
      binFa.kiir(kiFile);

      
      kiFile.println("depth = " + binFa.getMelyseg());
      kiFile.println("mean = " + binFa.getAtlag());
      kiFile.println("var = " + binFa.getSzoras());

      kiFile.close();
      beFile.close();

    } catch (java.io.FileNotFoundException fnfException) {
      fnfException.printStackTrace();
    } catch (java.io.IOException ioException) {
      ioException.printStackTrace();
    }

  }
}
        

          ]]></programlisting> 
        
    </section>     

    <section>

      <title>Gagyi</title>

      <para>Végbemegy</para>
           <programlisting language="java"><![CDATA[
public class gagyi2{


  public static void main(String[] args)
  {

  Integer x = -128;
  Integer t = -128;

  System.out.println(x);
  System.out.println(t);

  while (x <= t && x >= t && t != x );



  }

}



                      ]]></programlisting> 

      <para>Végtelen ciklus</para>


        <programlisting language="java"><![CDATA[
public class gagyi2{


  public static void main(String[] args)
  {

  Integer x = -129;
  Integer t = -129;

  System.out.println(x);
  System.out.println(t);

  while (x <= t && x >= t && t != x );



  }

}



                      ]]></programlisting> 

                      <para>Hogy lehet hogy az egyik kód végbemegy, a másik nem? Látszólag semmi különbség nincs a két kódcsipet között, a két Integer objektum értékét kivéve természetesen. Nos, az Integer osztály miatt történik mindez. Ez azért történik, mert Java-ban az Integer osztály esetében, cache-eli az értékeket -128-tól 127-ig. Ezt a gyorsabb lefutás, és optimalizáltság érdekében teszi.</para>

                      <para>Említettem, hogy az Integer egy objektum, illetve tudjuk hogy a Java referenciákkal dolgozik, s ebből a két információból már valószínűnek tartom, hogy egyértelmű a válasz az érdekes jelenségre.</para>

                      <para>Amikor összehasonlítjuk a két változót a while ciklusban, akkor valójában nem a két objektum int típusú értékét hasonlítjuk össze, hanem a két objektumot magát (referenciáját), ami valójában csak egy objektum, két referenciaváltozóval. Tehát amíg az Integer -128 és 127 között mozog, az azonos értékű változókhoz egy objektum társul, s minden, az intervallumon kívülre eső változóhoz új objektum kreálódik.</para>

                      <para>Ennélfogva, amíg az intervallumon belül hasonlítjuk össze, végbemegy a ciklus, pontosabban bele se lépünk a ciklusban, hiszen csak a t!=x van értelmezve, ami természetesen nem igaz, hisz a két változó ugyanarra az objektumra mutat. A másik esetben pedig a t!=x mindig igaz lesz, mivel két objektumot hasonlít össze, más memóriacímeken.</para>



    </section>


        
			<section>
        <title>Yoda</title>



        	<para>Írjunk olyan Java programot, ami java.lang.NullPointerEx-el leáll, ha nem követjük a Yoda
conditions-t! https://en.wikipedia.org/wiki/Yoda_conditions</para>


		 <programlisting language="java"><![CDATA[

public class yoda{


	public static void main(String[] args)
	{

		String str = null; 

		if ("text".equals(str) )
		{
			System.out.println("ok");
		}
		System.out.println("This was ok, because it didnt said ok");

		try {
			if (str.equals("text"))
			{
				System.out.println("ok");
			}
		}
		catch(Exception e) 
		{
			System.out.println("not ok");
		}

	}

}

                    ]]></programlisting>  

                    <para>láthatjuk, hogy ha egy String objektumnak null értéket adunk, akkor nem lehet összehasonlítani egy karakterlánccal, ezt az első if statement-ben láthatjuk. Pontosabban láthatjuk, hogy nem fog hibát kiadni, mivel először a karakterláncot "keresi meg" /"ragadja meg", s azután hasonlít, viszont a második esetben láthatjuk, hogy ha a null értéket próbáljuk "megragadni", akkor hamar hibába fogunk esni.</para>



            </section>   




            <section>
            <title>Kódolás from scratch</title>


            <para>
            	Induljunk ki ebből a tudományos közleményből: http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbp-
alg.pdf és csak ezt tanulmányozva írjuk meg Java nyelven a BBP algoritmus megvalósítását!
Ha megakadsz, de csak végső esetben: https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-
javat/apbs02.html#pi_jegyei (mert ha csak lemásolod, akkor pont az a fejlesztői élmény marad ki,
melyet szeretném, ha átélnél).
</para>





			<programlisting language="java"><![CDATA[

import java.math.BigDecimal;
import java.math.MathContext;

public class Pi {
	private static final BigDecimal ONE = BigDecimal.ONE;
	private static final BigDecimal TWO = new BigDecimal(2);
	private static final BigDecimal FOUR = new BigDecimal(4);
	private static final BigDecimal FIVE = new BigDecimal(5);
	private static final BigDecimal SIX = new BigDecimal(6);
	private static final BigDecimal EIGHT = new BigDecimal(8);
	private static final BigDecimal SIXTEEN = new BigDecimal(16);

	public static void main(String[] args) {
		int decimalPlaces = 3000;
		MathContext mc = new MathContext(decimalPlaces);
		
		BigDecimal result = BigDecimal.ZERO;
		BigDecimal eightTimesI = EIGHT.negate();
		BigDecimal sixteenToTheMinusI = SIXTEEN;
		for (int i = 0; i < decimalPlaces; i++) {
			eightTimesI = eightTimesI.add(EIGHT);
			sixteenToTheMinusI = sixteenToTheMinusI.divide(SIXTEEN, mc);
			
			result = result.add(
				sixteenToTheMinusI.multiply(
					(FOUR.divide(eightTimesI.add(ONE), mc)
					.subtract(TWO.divide(eightTimesI.add(FOUR), mc))
					.subtract(ONE.divide(eightTimesI.add(FIVE), mc))
					.subtract(ONE.divide(eightTimesI.add(SIX), mc)))
				));
		}

		System.out.println(result);
		System.out.println(result.toString().startsWith(
				"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359"));
	}
}

                    ]]></programlisting>  

                    <para>Ez az program a BBP algoritmuson alapul, amivel a Pi megközelítő értékét lehet kiszámolni. Természetesen magát a Pi-t nem lehet, mivel az csak egy 'végtelenesített' algoritmussal lehetne, végtelen erőforrás pedig nem létezik az informatikában, sőt, a világban sem. Az algoritmus a Pi számjegyeit számolja, a feladatban a kihívás pedig inkább az jelenti, hogy hosszú, sok számjegyből álló számokat tudjunk kezelni. Ebben az esetben a Java-ban van egy külön class, a BigDecimal, ami pontosan a hasonló esetekre lett megteremtve. Ezzel az osztállyal, és a hozzátartozó metódusokkal és függvényekkel pedig mindössze le kell gépelni a BBP algoritmust.</para>
   
            </section>    


            


</chapter>                
