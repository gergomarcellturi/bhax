<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/lvmi6tyz-nI">https://youtu.be/lvmi6tyz-nI</link>
        </para>
        
    <para>
        Több módon is létre lehet hozni végtelen ciklusokat.
        
        Ahoz hogy egy cput-t száz százalékban dolgoztassunk egyszerűen folyamatosan dolgoztatjuk egy processzen.
        Így egy egyszerű végtelen ciklussal el is érhetjük hogy az egyik mag száz százalékban legyen dolgoztatva.
        
        Forrás: <link xlink:href="../../Feladatok/vegtelen_egy.c">
                        <filename>vegtelen_egy.c</filename>
            </link>

    </para>  
       <programlisting language="c"><![CDATA[
           
           
           //vegtelen_egy.c
       
        int main()
{
	while(1)

		{
		
		}

	return 0;
}
             
           
           
           ]]></programlisting>    
           
           <screen>
            ps aux | grep vegtelen
            wyndrel+  4190 99.0  0.0   4376   716 pts/1    R+   13:19   0:20 ./vegtelen_egy
            wyndrel+  4197  0.0  0.0  24120  1004 pts/2    S+   13:19   0:00 grep --color=auto vegtelen

           </screen>
           
           
           <para>
               Láthatjuk a harmadik oszlopban hogy a processz közel száz százalékban terheli a cpu-t.
           </para>
                            
                                             
                                                                               
        
           <para>
               Ahhoz hogy egy mag nulla százalékban, pontosabban közel nulla százalékban legyen dolgoztatva, ugyancsak egy 
               egyszerű végtelen ciklust kell alkotnunk amiben van szünet, így bár nem teljesen nulla százalékban van dolgoztatva, 
               olyan kis mértékben használjuk a mag erőforrásait hogy tekinthetjük nulla százaléknak.
               
               Forrás: <link xlink:href="../../Feladatok/vegtelen_nulla.c">
                        <filename>vegtelen_nulla.c</filename>
            </link>
           </para>
           
           <programlisting language="c"><![CDATA[
               
               //vegtelen_nulla.c
           
int main()
{

	while(1)
	{
		sleep(1);
	}

	return 0;
}
               
           ]]></programlisting>     
        
        
        
           <screen>
            ps aux | grep vegtelen
            wyndrel+  4261  0.0  0.0   4376   796 pts/2    S+   13:22   0:00 ./vegtelen_nulla
            wyndrel+  4266  0.0  0.0  24120  1148 pts/1    S+   13:23   0:00 grep --color=auto vegtelen

           </screen>
        
           <para>
               Itt pedig láthatjuk hogy a processz nulla százalékban terheli a cput.
           </para>
        
        
           <para>
               A legegyszerűbb megoldás arra hogy minden processz száz százalékban terheljünk az az, hogy az első, tehát a 'vegtelen_egy' processzet annyiszor 
               futtatjuk ahány magunk van.
           </para>
        
        
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        
        <para>
            SKIP - 1
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        
        <para>
            <link xlink:href="../../Feladatok/valtozo_csere.c">
                        <filename>valtozo_csere.c</filename>
            </link>
        </para>
        <programlisting language="c"><![CDATA[
            
            int main()

{
	printf("Első Szám ->  ");
	int a;
	scanf("%d", &a);
	printf("\nMásodik Szám ->  ");
	int b;
	scanf("%d", &b);
	printf("\n-------------\n");

	printf("Első Szám ->  %d\n", a);
	printf("Második Szám ->  %d\n", b);
	printf("\n----- Csere -----\n");
	a = a + b;
	b = a - b;
	a = a - b;


	printf("Első Szám ->  %d\n", a);
	printf("Második Szám ->  %d\n", b);


	return 0;


}
        
        
        
        ]]></programlisting>   
        <para>
            Fontos tudni, hogy bár ezzel a megoldással megspórolunk egy változót, a mai számítógépek gyorsasága,
            illetve memóriakapacitására tekintettel nézve, az extra változó használata véleményem szerint egy luxus amit
            megengedhetünk magunknak.
            
            Fontos kiemelni azt is, hogy bár ez a megoldás integer alapú adatokkal működik, más objektumokkal már nem valószínű.
            ( pl.: char, string, stb ).
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        
        <para>
            <link xlink:href="../../Feladatok/labda.c">
                        <filename>labda.c</filename>
            </link>
        </para>
        
        <programlisting language="c"><![CDATA[
            
            //labda.c
            
            #include<stdio.h>
#include<unistd.h>


void DrawMap(int r, int c, int cr, int cc)
{

    for (int i = 0; i<(r+2); i++)
    {

        for (int j = 0; j < (c+2); j++)
        {

            if (i == (cr+1) && j == (cc+1))
            {
                printf("o");
            }
            else
            {
                printf(" ");
            }

            if (i == 0 || j == 0 || i == (r+1) || j == (c+1) )
            {
                printf(".");
            }
            
        }
        printf("\n");
    }

}
            
            ]]> </programlisting>
        
        
        <para>
            Ezen metódus rajzolja le a pályát minden iterációjában. Megkapja értékül a pálya méreteit amit a program elején mi adunk meg,
            hogy tudja pontosan mekkora pályát kell rajzolnia, ezen felül megkapja a lapda jelenlegi pozícióját is, hogy tudja hova kell berajzolnia.
        </para>
        
        
        <programlisting language="c"><![CDATA[



int main()
{

    int row;
    int coloumn;

    printf("number of rows -> "); scanf("%d",&row); printf("\n");
    printf("number of coloumns -> "); scanf("%d",&coloumn); printf("\n");

    int yn = 1;
    

    int CurrentRow = row /2;
    int CurrentColoumn = coloumn/2;
    int prevRow = CurrentRow - 1;
    int prevCol = CurrentColoumn - 1;
]]> </programlisting>
        
        
        <para>
            Deklaráljuk a fő változókat, illetve felvesszük a pálya méreteit. Ezen felül 'beállítjuk' a labdát a pálya közepére, ileltve megadjuk
            neki a kezdő irányt, hogy merre 'pattanjon'.
        </para>
        
        
        <programlisting language="c"><![CDATA[

    while (1)
    {

    DrawMap(row, coloumn, CurrentRow,CurrentColoumn);

    sleep(1);

            ]]> </programlisting>
        
        
        <para>
            Lerajzoljuk a pályát, illetve várunk egy másodpercet. Ha ezt nem tennénk meg a program túl
            gyorsan rajzolná a pálya egymás utáni iterációit, így nem látnánk mi is történik valójában.
        </para>
        
        
        <programlisting language="c"><![CDATA[
            
    if ( CurrentRow == 0)
    {
        prevRow = -1;
    }
    if (CurrentRow == row-1)
    {
        prevRow = row+1;
    }
    if (CurrentColoumn == 0)
    {
        prevCol = -1;
    }
    if (CurrentColoumn == coloumn-1)
    {
        prevCol = coloumn+1;
    }
    


    if (CurrentRow < prevRow)
    {
        CurrentRow--;
    }
    else { CurrentRow++; }
    if (CurrentColoumn < prevCol)
    {
        CurrentColoumn--;
    } else {CurrentColoumn++;}

            ]]> </programlisting>
        
        
        <para>
            Megadjuk hogy a pálya következő iterációjában hol fog elhelyezkedni a labda.
        </para>
        
        
        <programlisting language="c"><![CDATA[

    printf("\n");
    printf("\n");
    printf("\n");
    printf("\n");
    printf("\n");
    printf("\n");
    printf("\n");
    printf("\n");
    printf("\n");
    printf("\n");
    }

    





    return 0;
}
            
            
       ]]> </programlisting>
        
        
        <para>
            Végül pedig beteszek néhány sort hogy elválaszthatóak legyenek a külön iterációk. 
            
            Ez egy elég primitív megoldás, de a feladat leírásának eleget tesz. 
        </para>
        
        
        
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Tutoráltak:
            <link xlink:href="https://github.com/ratkudani/">Ratku Dániel/</link>
        </para>
        <para>
            <link xlink:href="../../Feladatok/szohossz.c">
                        <filename>szohossz.c</filename>
            </link>
        </para>
         <programlisting language="c"><![CDATA[

    //szohossz.c
             
             
            int main(void)
{
    int h = 0;
    int n = 0x01;
    do{ ++h;}
    while (n<<=1);
    printf("Szóhossz -> "); printf("%d",h); printf(" bit" ); printf("\n");
    return 0;

}
            
       ]]> </programlisting>
        
        
        <para>
            Egy egyszerű program mely biteltolással határozza meg hogy pontosan hány számjegy 'fér el' az intben,
            ezzel meghatározva hány bites a szóhossz.
        </para>
        <para>
            <link xlink:href="../../Feladatok/BogoMIPS.c">
                        <filename>BogoMIPS.c</filename>
            </link>
        </para>
        <programlisting language="c"><![CDATA[

    //BogoMIPS.c
            
#include <time.h>
#include <stdio.h>
void
delay (unsigned long long int loops)
{
unsigned long long int i;
for (i = 0; i < loops; i++);
}
int main (void)
{
unsigned long long int loops_per_sec = 1;
unsigned long long int ticks;
printf ("Calibrating delay loop..");
fflush (stdout);
while ((loops_per_sec <<= 1))
{
ticks = clock ();
delay (loops_per_sec);
ticks = clock () - ticks;
printf ("%llu %llu\n", ticks, loops_per_sec);
if (ticks >= CLOCKS_PER_SEC)
{
loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;
printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
(loops_per_sec / 5000) % 100);
return 0;
}
}
printf ("failed\n");
return -1;
}
            
            
            
            
            
       ]]> </programlisting>
       
       <screen>
           ./BogoMIPS 
Calibrating delay loop..4 2
2 4
2 8
3 16
3 32
3 64
4 128
5 256
7 512
13 1024
23 2048
43 4096
85 8192
169 16384
334 32768
909 65536
1597 131072
903 262144
2374 524288
3372 1048576
8161 2097152
14339 4194304
25820 8388608
48024 16777216
91928 33554432
176512 67108864
366557 134217728
737364 268435456
1482899 536870912
ok - 724.00 BogoMIPS

           
       </screen>
       
       <para>
           A kimenet jobb oldali oszlopában a kettő hatványait láthatjuk, míg a bal oldali oszlopában azt figyelhetjük meg hogy az eredmény kiszámolásáig hányszor tickelt a cpu.
           Használata: A BogoMIPS használatával próbálják belőni a cpu sebességét Linux kernelben.
       </para>
        
        
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
       
        <para>
            <link xlink:href="../../Feladatok/pagerank.c">
                        <filename>pagerank.c</filename>
            </link>
        </para>
        <programlisting language="c"><![CDATA[

    //pagerank.c
             
             #include <stdio.h>
#include <math.h>
#include <stdlib.h>

void
kiir (double tomb[], int db)
{
int i;
for (i=0; i<db; i++)
printf("PageRank [%d]: %lf\n", i, tomb[i]);
}

double tavolsag(double pagerank[],double pagerank_temp[],int db)
{
double tav = 0.0;
int i;
for(i=0;i<db;i++)
tav +=abs(pagerank[i] - pagerank_temp[i]);
return tav;
}

int main(void)
{
double L[4][4] = {
{0.0, 0.0, 1.0 / 3.0, 0.0},
{1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
{0.0, 1.0 / 2.0, 0.0, 0.0},
{0.0, 0.0, 1.0 / 3.0, 0.0}
};

double PR[4] = {0.0, 0.0, 0.0, 0.0};
double PRv[4] = {1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0};

long int i,j,h;
i=0; j=0; h=5;

for (;;)
{
for(i=0;i<4;i++)
PR[i] = PRv[i];
for (i=0;i<4;i++)
{
double temp=0;
for (j=0;j<4;j++)
temp+=L[i][j]*PR[j];
PRv[i]=temp;
}

if ( tavolsag(PR,PRv, 4) < 0.00001)
break;
}
kiir (PR,4);
return 0;

}
    
            
       ]]> </programlisting>
       
        
        <para>
            A PageRank elsősorban a Google-hoz kötődik. Célja a jó minőségű oldalak felderítése. 
            A kimenő linkeket veszi alapul, feltételezve, hogy a kimenő linkek az adott oldal minőségéről tanúskodnak. 
            
            Tehát ha van A és B oldal, és A oldalon van egy hiperlink amely B oldalra mutat, akkor A veszít az értékéből, B értéke pedig
            nő. Fontos kiemelni, hogy minden oldalnak kezdetben 1-es az értéke.
        </para>
    </section>
                                                                                                                                                                                                                                                                                                                                                        
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Tutoráltak:
            <link xlink:href="https://github.com/ratkudani/">Ratku Dániel/</link>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            <link xlink:href="../../Feladatok/monty_hall.r">
                        <filename>monty_hall.r</filename>
            </link>
        </para>
        
        <programlisting language="R"><![CDATA[
            
            //monty_hall.r
            
            
            kiserletek_szama=10000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }

    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

}

nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}

valtoztatesnyer = which(kiserlet==valtoztat)


sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)
        
        ]]> </programlisting>
        
        
        <para>
            A játék lényege a következő: A játékos előtt három ajtó áll. A három ajtó közül az egyikben értékes nyeremény van,
            a másik kettőben pedig értéktelen. A játékos célje ebből adódóan az értékes nyeremény megszerzése.
            
            A játékos kiválaszt egy ajtót, azonban ekkor a műsorvezető kinyit a másik két ajtó közül egyet, amiben biztosan az egyik
            értéktelen nyeremény van. A játékos ekkor választhat: Marad az eredetileg kiválasztott ajtónál és kinyitja, vagy átvált a harmadik,
            még ki nem nyitott ajtóra.
            
            Bár lehet hogy elsőre úgy tűnhet, hogy a nyeremény megszerzésére körülbelül 33% esélye van a játékosnak, ez messzebb sem állhatna az igaszságtól.
            Egy ügyes játékosnak ugyanis 66% esélye van. Abban az esetben ha a játékos úgy dönt hogy mindig átvált a másik, még ki nem nyitott ajtóra, 
            akkor ha odafigyelünk láthatjuk hogy a fő célja a játékosnak megtalálni az egyik értéktelen ajtót (hiszen ha kiválaszt egy értéktelen ajtót,
            a második automatikusan kiesik, hisz a műsorvezető kinyitja azt, így ha ajtót vált garantáltan a nyer). Mivel két értéktelen ajtó van,a háromból,
            így abban az esetben ha a játékos mindig ajtót vált, 66% esélye van a győzelemre. 
        </para>
        
        <para>
            
            Az R szimuláció 100 próbálkozás után:
            
        </para>
        
        <screen>
        [1] "Kiserletek szama: 100"
        > length(nemvaltoztatesnyer)
        [1] 36
        > length(valtoztatesnyer)
        [1] 64
        > length(nemvaltoztatesnyer)/length(valtoztatesnyer)
        [1] 0.5625
        > length(nemvaltoztatesnyer)+length(valtoztatesnyer)
        [1] 100
        > 

        </screen>
        <para>
            
            Az R szimuláció 100 000 próbálkozás után:
            
        </para>
        
         <screen>
[1] "Kiserletek szama: 100000"
> length(nemvaltoztatesnyer)
[1] 33292
> length(valtoztatesnyer)
[1] 66708
> length(nemvaltoztatesnyer)/length(valtoztatesnyer)
[1] 0.4990706
> length(nemvaltoztatesnyer)+length(valtoztatesnyer)
[1] 100000
> 


        </screen>
        
        <para>
            
            Az R szimuláció 1 000 000 próbálkozás után:
            
        </para>
        
        <screen>
[1] "Kiserletek szama: 1000000"
> length(nemvaltoztatesnyer)
[1] 333805
> length(valtoztatesnyer)
[1] 666195
> length(nemvaltoztatesnyer)/length(valtoztatesnyer)
[1] 0.501062
> length(nemvaltoztatesnyer)+length(valtoztatesnyer)
[1] 1000000
> 



        </screen>
        
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>
            <link xlink:href="../../Feladatok/brun.r">
                        <filename>brun.r</filename>
            </link>
        </para>
         
        <programlisting language="R"><![CDATA[
            
            //brun.r
            
            
library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")

            
            
            
            
            
        ]]> </programlisting>
        
               
     
               
        <para>
            A Brun tétel: Az ikerprímek reciprokösszegük egy konstanshoz konvergálnak.
            
            Ezt a konstanst napjainkban még mindig csak megbecsülni tudják, megközelítő értéke: 1.902160583104
            
            Ezen feladatban a Brun konstansot kell megpróbálni megközelíteni, tehát leszimulálni.
        </para>
              
              
              <para>
            A fentebbi R kód bár eleget tesz a feladatnak, maga a megoldása elég egyszerű. A program egy megadott 
            határértékig megkeresi az összes prímet, majd ezen prímek közül megkeresi azokat, amelyek ikerprímeknek felelnek meg.
            Végül pedig ezen príem reciprokjait összeadja.
                  
                  
        </para>
        
        <screen>
> 
> x=seq(13, 1000000, by=10000)
> y=sapply(x, FUN = stp)
> plot(x,y,type="b")
> 

        </screen>
        
        <figure>
            <title>A B<subscript>2</subscript> konstans közelítése</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/brun.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A B<subscript>2</subscript> konstans közelítése</phrase>
                </textobject>
            </mediaobject>
        </figure>     

        
        
        
        
                                   
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/VkMFrgBhN1g">https://youtu.be/VkMFrgBhN1g</link>
                    </para>    
                </listitem>                
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/aF4YK6mBwf4">https://youtu.be/aF4YK6mBwf4</link>
                    </para>    
                </listitem>                
            </itemizedlist>                
        </tip>
    </section>

</chapter>                
